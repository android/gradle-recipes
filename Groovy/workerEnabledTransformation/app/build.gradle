        plugins {
            id 'com.android.application'
        }
        import java.io.Serializable
        import java.nio.file.Files
        import javax.inject.Inject

        import org.gradle.api.file.Directory
        import org.gradle.api.file.DirectoryProperty
        import org.gradle.api.file.RegularFileProperty
        import org.gradle.api.provider.Property
        import org.gradle.api.tasks.InputFiles
        import org.gradle.api.tasks.Internal
        import org.gradle.api.tasks.TaskAction
        import org.gradle.workers.WorkerExecutor

        import com.android.build.api.artifact.SingleArtifact
        import com.android.build.api.artifact.ArtifactTransformationRequest
        import com.android.build.api.variant.BuiltArtifact

        
        import org.gradle.api.DefaultTask
        import org.gradle.api.file.Directory
        import org.gradle.api.file.DirectoryProperty
        import org.gradle.api.file.RegularFileProperty
        import org.gradle.api.provider.Property
        import org.gradle.api.tasks.InputFiles
        import org.gradle.api.tasks.TaskAction
        import org.gradle.workers.WorkerExecutor
        import com.android.build.api.variant.BuiltArtifact
        import com.android.build.api.artifact.ArtifactTransformationRequest
        import org.gradle.api.tasks.Internal

        import java.nio.file.Files

        interface WorkItemParameters extends WorkParameters {
            RegularFileProperty getInputApkFile()
            RegularFileProperty getOutputApkFile()
        }

        abstract class WorkItem implements WorkAction<WorkItemParameters> {

            WorkItemParameters workItemParameters

            @Inject
            WorkItem(WorkItemParameters parameters) {
               this.workItemParameters = parameters
            }

            void execute() {
                workItemParameters.getOutputApkFile().get().getAsFile().delete()
                Files.copy(
                    workItemParameters.getInputApkFile().getAsFile().get().toPath(),
                    workItemParameters.getOutputApkFile().get().getAsFile().toPath())
            }
        }

        abstract class CopyApksTask extends DefaultTask {

            private WorkerExecutor workers

            @Inject
            CopyApksTask(WorkerExecutor workerExecutor) {
                this.workers = workerExecutor
            }

            @InputFiles
            abstract DirectoryProperty getApkFolder()

            @OutputDirectory
            abstract DirectoryProperty getOutFolder()

            @Internal
            abstract Property<ArtifactTransformationRequest<CopyApksTask>> getTransformationRequest()

            @TaskAction
            void taskAction() {

                 transformationRequest.get().submit(
                     this,
                     workers.noIsolation(),
                     WorkItem, {
                         BuiltArtifact builtArtifact,
                         Directory outputLocation,
                         WorkItemParameters param ->
                            File inputFile = new File(builtArtifact.outputFile)
                            param.getInputApkFile().set(inputFile)
                            param.getOutputApkFile().set(new File(outputLocation.asFile, inputFile.name))
                            param.getOutputApkFile().get().getAsFile()
                     }
                )
            }
        }
        

        android {
            
compileSdkVersion(29)
defaultConfig {
    minSdkVersion(21)
    targetSdkVersion(29)
}
        }

        androidComponents {

            onVariants(selector().all(), { variant ->
                TaskProvider copyApksProvider = tasks.register('copy' + variant.getName() + 'Apks', CopyApksTask)

                ArtifactTransformationRequest request =
                    variant.artifacts.use(copyApksProvider)
                        .wiredWithDirectories(
                            { it.getApkFolder() },
                            { it.getOutFolder()})
                        .toTransformMany(SingleArtifact.APK.INSTANCE)

                copyApksProvider.configure {
                    it.transformationRequest.set(request)
                }
            })
        }